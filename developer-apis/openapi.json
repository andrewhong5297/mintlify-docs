{
  "openapi": "3.0.3",
  "info": {
    "title": "Token Balance API",
    "description": "This API provides realtime balances information from accounts across different blockchains.",
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.dune.com/api"
    }
  ],
  "paths": {
    "/beta/balance/chains": {
      "get": {
        "tags": [
          "crate::handlers::chains_handler"
        ],
        "operationId": "chains_handler",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainsResponse"
                },
                "example": {
                  "chains": [
                    {
                      "id": 42161,
                      "name": "arbitrum",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 43114,
                      "name": "avalanche_c",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 8453,
                      "name": "base",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 56,
                      "name": "bnb",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 1,
                      "name": "ethereum",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 137,
                      "name": "polygon",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 10,
                      "name": "optimism",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 534352,
                      "name": "scroll",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 42220,
                      "name": "celo",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 690,
                      "name": "redstone",
                      "supported_assets": [
                        "native"
                      ]
                    },
                    {
                      "id": 34443,
                      "name": "mode",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 42170,
                      "name": "arbitrum_nova",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 59144,
                      "name": "linea",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 60808,
                      "name": "bob",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 81457,
                      "name": "blast",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 7777777,
                      "name": "zora",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 666666666,
                      "name": "degen",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 888888888,
                      "name": "ancient8",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 1380012617,
                      "name": "rari",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 100,
                      "name": "gnosis",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 1101,
                      "name": "zkevm",
                      "supported_assets": [
                        "native"
                      ]
                    },
                    {
                      "id": 324,
                      "name": "zksync",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 70700,
                      "name": "proof_of_play",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 250,
                      "name": "fantom",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 11155111,
                      "name": "sepolia",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    },
                    {
                      "id": 1329,
                      "name": "sei",
                      "supported_assets": [
                        "native",
                        "erc20"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server"
          }
        }
      }
    },
    "/beta/balance/{address}": {
      "get": {
        "tags": [
          "balance"
        ],
        "operationId": "balances_handler",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get balances for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all_chains",
            "in": "query",
            "description": "Specify this to get native balances for a long tail of EVM chains, where we donâ€™t support ERC20 assets",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "chain_ids",
            "in": "query",
            "description": "Comma separated list of chain ids to get balances for",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "exclude_spam_tokens",
            "in": "query",
            "description": "Specify this to exclude spam tokens from the response",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "filters",
            "in": "query",
            "description": "Specify `ERC20` or `NATIVE` to get only ERC20 tokens or native assets, respectively",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transactions to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalancesResponse"
                },
                "example": {
                  "balances": [
                    {
                      "address": "native",
                      "amount": "605371497350928252303",
                      "chain": "ethereum",
                      "decimals": 18,
                      "price_usd": 3042.816964922323,
                      "symbol": "ETH",
                      "value_usd": 1842034.6622198338
                    }
                  ],
                  "next_offset": "dKMBWDLqM7vlyn5OMEXsLWp0nI4AAAABA5JLazNO7x4poVGqUwsgxgqvvIg",
                  "request_time": "2023-11-07T05:31:56Z",
                  "response_time": "2023-11-07T05:31:56Z",
                  "wallet_address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    },
    "/beta/balance/{address}/subscribe": {
      "get": {
        "tags": [
          "crate::handlers::balances::balances_subscribe_handler"
        ],
        "operationId": "balances_subscribe_handler",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get balances for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain_ids",
            "in": "query",
            "description": "Comma separated list of chain ids to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Successful Response, Connection: Upgrade to WebSocket"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    },
    "/beta/transactions/chains": {
      "get": {
        "tags": [
          "crate::chains_handler"
        ],
        "operationId": "chains_handler",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainsResponse"
                },
                "example": {
                  "chains": [
                    {
                      "id": 8453,
                      "name": "base"
                    },
                    {
                      "id": 81457,
                      "name": "blast"
                    },
                    {
                      "id": 1,
                      "name": "ethereum"
                    },
                    {
                      "id": 42161,
                      "name": "arbitrum"
                    },
                    {
                      "id": 43114,
                      "name": "avalanche_c"
                    },
                    {
                      "id": 56,
                      "name": "bnb"
                    },
                    {
                      "id": 42220,
                      "name": "celo"
                    },
                    {
                      "id": 10,
                      "name": "optimism"
                    },
                    {
                      "id": 137,
                      "name": "polygon"
                    },
                    {
                      "id": 11155111,
                      "name": "sepolia"
                    },
                    {
                      "id": 100,
                      "name": "gnosis"
                    },
                    {
                      "id": 7777777,
                      "name": "zora"
                    },
                    {
                      "id": 59144,
                      "name": "linea"
                    },
                    {
                      "id": 250,
                      "name": "fantom"
                    },
                    {
                      "id": 1101,
                      "name": "zkevm"
                    },
                    {
                      "id": 534352,
                      "name": "scroll"
                    },
                    {
                      "id": 1329,
                      "name": "sei"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server"
          }
        }
      }
    },
    "/beta/transactions/{address}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "operationId": "endpoint",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get transactions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of transactions to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true,
              "minimum": 0
            }
          },
          {
            "name": "chain_ids",
            "in": "query",
            "description": "Comma separated list of chain ids to get transactions for",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "method_id",
            "in": "query",
            "description": "Return only transactions with this method id",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "filter transactions to a given address",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "decode",
            "in": "query",
            "description": "Return abi decoded transactions and logs",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsResponse"
                },
                "example": {
                  "next_offset": "AAYd_b6aoIAAAAABAAAAAA4KZhIAAAAAAAAAAAAAAAAAAAAE",
                  "transactions": [
                    {
                      "address": "0x7893015832ea33bbe5ca7e4e3045ec2d6a749c8e",
                      "block_hash": "0x6761509c675c0afd7737611513e39e4334c0f4ed176992d92c57d7cc296f9d58",
                      "block_number": 40517009,
                      "block_time": "2024-05-18T09:32:32+00:00",
                      "block_version": 0,
                      "chain": "Ethereum",
                      "data": "0x4e71d92d",
                      "from": "0x7893015832ea33bbe5ca7e4e3045ec2d6a749c8e",
                      "gas_price": "0x62b85e900",
                      "hash": "0x029e21354ec2afad789c5fcd24987871d832b05b4159722a731d28141c2bd00f",
                      "index": 4,
                      "max_fee_per_gas": "0x835105080",
                      "max_priority_fee_per_gas": "0x59682f00",
                      "nonce": "0xd00b000000000000",
                      "to": "0x5857019c749147eee22b1fe63500f237f3c1b692",
                      "transaction_type": "Sender",
                      "value": "0x0"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server"
          }
        }
      }
    },
    "/beta/transactions/{address}/subscribe": {
      "get": {
        "tags": [
          "transactions"
        ],
        "operationId": "endpoint_subscribe",
        "parameters": [
          {
            "name": "X-Dune-Api-Key",
            "in": "header",
            "description": "API key to access the service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Wallet to get transactions for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Successful Response, Connection: Upgrade to WebSocket"
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed data"
          },
          "500": {
            "description": "Internal Server Error - A generic error occurred on the server."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BalanceData": {
        "type": "object",
        "required": [
          "chain",
          "chain_id",
          "address",
          "amount"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "decimals": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "price_usd": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "value_usd": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "BalanceErrorInformation": {
        "type": "object",
        "required": [
          "chain",
          "chain_id",
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "chain": {
            "type": "string"
          },
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "description": {
            "type": "string"
          }
        }
      },
      "BalanceErrors": {
        "type": "object",
        "required": [
          "token_errors"
        ],
        "properties": {
          "token_errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceErrorInformation"
            }
          }
        }
      },
      "BalancesResponse": {
        "type": "object",
        "required": [
          "response_time",
          "wallet_address",
          "balances"
        ],
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceData"
            }
          },
          "errors": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BalanceErrors"
              }
            ],
            "nullable": true
          },
          "next_offset": {
            "type": "string",
            "nullable": true
          },
          "request_time": {
            "type": "string",
            "nullable": true
          },
          "response_time": {
            "type": "string"
          },
          "wallet_address": {
            "type": "string",
            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
          }
        }
      },
      "ChainEntry": {
        "type": "object",
        "required": [
          "name",
          "id",
          "supported_assets"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "name": {
            "type": "string"
          },
          "supported_assets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChainsResponse": {
        "type": "object",
        "required": [
          "chains"
        ],
        "properties": {
          "chains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainEntry"
            }
          }
        }
      },
      "ResponseLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Log"
          },
          {
            "type": "object",
            "properties": {
              "decoded": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DecodedEvent"
                  }
                ],
                "nullable": true
              }
            }
          }
        ]
      },
      "ResponseTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object",
            "required": [
              "logs"
            ],
            "properties": {
              "decoded": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DecodedFunction"
                  }
                ],
                "nullable": true
              },
              "logs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResponseLog"
                }
              }
            }
          }
        ]
      },
      "Transaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object",
            "required": [
              "logs"
            ],
            "properties": {
              "logs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          }
        ]
      },
      "TransactionBase": {
        "type": "object",
        "required": [
          "address",
          "chain",
          "chain_id",
          "block_time",
          "block_number",
          "block_version",
          "index",
          "hash",
          "block_hash",
          "value",
          "transaction_type",
          "from",
          "to",
          "nonce",
          "gas_price",
          "success",
          "data"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "block_hash": {
            "type": "string"
          },
          "block_number": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "block_time": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "block_version": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "chain": {
            "type": "string"
          },
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "data": {
            "type": "string",
            "format": "binary"
          },
          "from": {
            "type": "string"
          },
          "gas_price": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "nonce": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "to": {
            "type": "string"
          },
          "transaction_type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "TransactionType": {
        "type": "string",
        "enum": [
          "Sender",
          "Receiver"
        ]
      },
      "TransactionsResponse": {
        "type": "object",
        "required": [
          "transactions"
        ],
        "properties": {
          "next_offset": {
            "type": "string",
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseTransaction"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "balance",
      "description": "Balances API"
    },
    {
      "name": "chains",
      "description": "Chains API"
    },
    {
      "name": "transactions",
      "description": "Transactions API"
    }
  ]
}