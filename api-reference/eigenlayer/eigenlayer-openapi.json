{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI for EigenLayer API",
    "description": "API for predefined EigenLayer-related endpoints",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.dune.com/api"
    }
  ],
  "paths": {
    "/v1/eigenlayer/avs-metadata": {
      "get": {
        "summary": "Get metadata for all registered AVSs on Eigenlayer",
        "description": "Get metadata for all registered AVSs on Eigenlayer, including `avs_name`, `avs_contract_address`, `website`, `twitter`, `logo`, `description`",
        "operationId": "avsMetadata",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 10,
            "description": "Limit number of rows to return. This together with 'offset' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Offset row number to start (inclusive, first row means offset=0) returning results from. This together with 'limit' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to filter out rows from the results to return. This expression is similar to a SQL WHERE clause. More details about it in the Filtering section of the doc. This parameter is incompatible with `sample_count`."
          },
          {
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to define the order in which the results should be returned. This expression is similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "type": "string",
                      "description": "Unique identifier for the execution",
                      "example": " 01HWXR6GHNCNVYSZYCGM0AZDNF"
                    },
                    "query_id": {
                      "type": "integer",
                      "description": "Unique identifier for the query",
                      "example": 3682939
                    },
                    "is_execution_finished": {
                      "type": "boolean",
                      "description": "Flag to indicate if the execution is finished",
                      "example": true
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the query execution",
                      "example": "QUERY_STATE_COMPLETED"
                    },
                    "submitted_at": {
                      "type": "string",
                      "description": "Time when the query was submitted",
                      "example": "2024-05-02T22:53:29.01421Z"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "Time when the query will expire",
                      "example": "2024-07-31T22:53:37.773907Z"
                    },
                    "execution_started_at": {
                      "type": "string",
                      "description": "Time when the execution started",
                      "example": "2024-05-02T22:53:29.336543Z"
                    },
                    "execution_ended_at": {
                      "type": "string",
                      "description": "Time when the execution ended",
                      "example": "2024-05-02T22:53:37.773906Z"
                    },
                    "result": {
                      "type": "object",
                      "description": "results from query",
                      "example": {
                        "rows": [
                          {
                            "avs_contract_address": "0x71a77037870169d47aad6c2c9360861a4c0df2bf",
                            "avs_name": "AltLayer MACH",
                            "description": "AltLayer MACH is a fast finality AVS for OP Mainnet and Arbitrum One. As an AVS, users can delegate ETH or LSTs to any of the registered operators. The economic collateral deposited to secure MACH is then used to attest to the validity of a given rollupâ€™s state; thereby offering a fast finality layer for rollups. It will offer the following core services to end users on these rollups: fast confirmation for rollup transactions, crypto-economic security to detect any malicious network participants and decentralized validation of rollup states.",
                            "logo": "https://raw.githubusercontent.com/alt-research/eigendata/dev/avs/AltlayerMach/logo.png",
                            "twitter": "https://twitter.com/alt_layer",
                            "website": "https://altlayer.io/"
                          },
                          {
                            "avs_contract_address": "0xe5445838c475a2980e6a88054ff1514230b83aeb",
                            "avs_name": "Automata Multi-Prover AVS",
                            "description": "Automata Network explores the development of TEE Coprocessors in the direction of a Multi-Prover AVS on EigenLayer. Decentralized systems bootstrap a secondary TEE Prover to minimize network-breaking bugs and achieve better security and decentralization. The approach is augmented by the introduction of TEE Committees, with the Multi-Prover AVS dually bounded by machine trust and cryptoeconomic security.",
                            "logo": "https://raw.githubusercontent.com/automata-network/multi-prover-avs-metadata/main/ata-logo.png",
                            "twitter": "https://twitter.com/automatanetwork",
                            "website": "https://ata.network"
                          },
                          {
                            "avs_contract_address": "0x9fc952bdcbb7daca7d420fa55b942405b073a89d",
                            "avs_name": "Brevis coChain AVS",
                            "description": "Brevis is a smart ZK coprocessor that empowers smart contracts to read from and utilize the full historical on-chain data from any chain, and run customizable computations in a completely trust-free way to power use cases such as data-driven DeFi, zkBridge, ZK identity and more. Using EigenLayer, Brevis coChain AVS enable a new crypto-economics security with ZK fraud proof ZK Coprocessor model. With Brevis AVS, developers can build data-driven dApps that operate at a significantly lower cost when compared to the pure-ZK model.",
                            "logo": "https://raw.githubusercontent.com/brevis-network/eigendata/brv/avs/brevis/logo.png",
                            "twitter": "https://twitter.com/brevis_zk",
                            "website": "https://brevis.network"
                          },
                          {
                            "avs_contract_address": "0xd50e0931703302b080880c45148f5d83ea66ae2a",
                            "avs_name": "DODOchain MACH (Powered by AltLayer)",
                            "description": "DODOchain is an Omni-Trading Layer3, powered by the integration of Arbitrum, EigenLayer, and AltLayer. As a rollup-level liquidity layer, it connects Ethereum rollups and Bitcoin networks, consolidating liquidity into a single platform for seamless cross-chain trading. Leveraging its status as a Restaked Rollup, DODOchain offers decentralized verification and rapid finality, significantly enhancing both security and efficiency in the Omni-chain era.",
                            "logo": "https://raw.githubusercontent.com/alt-research/eigendata/dev/avs/DODOchainMach/logo.png",
                            "twitter": "https://twitter.com/DODO_chain",
                            "website": "https://www.dodochain.com/"
                          },
                          {
                            "avs_contract_address": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0",
                            "avs_name": "EigenDA",
                            "description": "EigenDA is a data availability solution with 10 MiB/s of write throughput and the lowest cost in its class. The system's design is inspired by Danksharding, which promises to scale Ethereum's DA beyond EIP-4844. EigenDA is available today. Learn more at https://docs.eigenlayer.xyz/eigenda/overview/",
                            "logo": "https://mainnet-ethereum-avs-metadata.s3.amazonaws.com/markEigenDA.png",
                            "twitter": "https://twitter.com/eigen_da",
                            "website": "https://docs.eigenlayer.xyz/eigenda/overview/"
                          },
                          {
                            "avs_contract_address": "0x4c4707e6dcc52494dabec4f5662d7092ba802264",
                            "avs_name": "EigenDA",
                            "description": "EigenDA is a data availability solution with 10 MiB/s of write throughput and the lowest cost in its class. The system's design is inspired by Danksharding, which promises to scale Ethereum's DA beyond EIP-4844. EigenDA is available today. Learn more at https://docs.eigenlayer.xyz/eigenda/overview/",
                            "logo": "https://mainnet-ethereum-avs-metadata.s3.amazonaws.com/markEigenDA.png",
                            "twitter": "https://twitter.com/eigen_da",
                            "website": "https://docs.eigenlayer.xyz/eigenda/overview/"
                          },
                          {
                            "avs_contract_address": "0x35f4f28a8d3ff20eed10e087e8f96ea2641e6aa2",
                            "avs_name": "Lagrange State Committees",
                            "description": "Lagrange State Committees are a ZK light client protocol for optimistic rollups that are designed through combining EigenLayer's restaked security with Lagrange's ZK Coprocessor.",
                            "logo": "https://raw.githubusercontent.com/Lagrange-Labs/AVS-config/main/config/lagrange-logo.png",
                            "twitter": "https://twitter.com/lagrangedev",
                            "website": "https://www.lagrange.dev/"
                          },
                          {
                            "avs_contract_address": "0xed2f4d90b073128ae6769a9a8d51547b1df766c8",
                            "avs_name": "Omni Network",
                            "description": "Omni is an Ethereum-native interoperability protocol that establishes low latency communications across Ethereumâ€™s rollup ecosystem. Restaking enables Omni to establish a new precedent for secure, performant, and globally compatible interoperability for the future of Ethereumâ€™s modular ecosystem.",
                            "logo": "https://raw.githubusercontent.com/omni-network/omni/main/static/omni-symbol.png",
                            "twitter": "https://twitter.com/OmniFDN",
                            "website": "https://omni.network/"
                          },
                          {
                            "avs_contract_address": "0xd25c2c5802198cb8541987b73a8db4c9bcae5cc7",
                            "avs_name": "Witness Chain",
                            "description": "The EigenLayer AVS for DePIN coordination. It is the first physical state consensus protocol which is unifying a siloed DePIN economy. Through WitnessChain, a shared economy of integrated physical assets is unlocked, facilitating the exchange of resources like computing power, energy, storage, and beyond.",
                            "logo": "https://raw.githubusercontent.com/kaleidoscope-blockchain/witnesschain-assets/main/icon-on-dark-blue.png",
                            "twitter": "https://twitter.com/witnesschain",
                            "website": "https://www.witnesschain.com"
                          },
                          {
                            "avs_contract_address": "0x6026b61bdd2252160691cb3f6005b6b72e0ec044",
                            "avs_name": "Xterio Mach (Powered by AltLayer)",
                            "description": "Xterio is a Web3 game developer and publisher founded by veterans of the game industry. Our mission is to create deep and rich gaming experiences driven by player ownership. We create rich worlds, stories, and characters to bring you amazing experiences. We make games because we love them and strive to make every Xterio game memorable and FUN!",
                            "logo": "https://raw.githubusercontent.com/alt-research/eigendata/dev/avs/XterioMach/logo.png",
                            "twitter": "https://twitter.com/XterioGames",
                            "website": "https://xter.io/"
                          },
                          {
                            "avs_contract_address": "0x23221c5bb90c7c57ecc1e75513e2e4257673f0ef",
                            "avs_name": "eoracle",
                            "description": "The modular and programmable oracle network secured by Ethereum, built with Eigenlayer.",
                            "logo": "https://raw.githubusercontent.com/eoracle/Eoracle-operator-setup/develop/logo2000.png",
                            "twitter": "https://twitter.com/eoracle_network",
                            "website": "https://www.eoracle.io"
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Metadata for the query",
                      "example": {
                        "column_names": [
                          "avs_name",
                          "avs_contract_address",
                          "website",
                          "twitter",
                          "logo",
                          "description"
                        ],
                        "column_types": [
                          "varchar",
                          "varbinary",
                          "varchar",
                          "varchar",
                          "varchar",
                          "varchar"
                        ],
                        "row_count": 11,
                        "result_set_bytes": 6248,
                        "total_row_count": 11,
                        "total_result_set_bytes": 6155,
                        "datapoint_count": 66,
                        "pending_time_millis": 322,
                        "execution_time_millis": 8437
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Core request validation failed, make sure you've given required columns and followed formatting rules for the CSV (no special characters or digits in column names)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eigenlayer/operator-metadata": {
      "get": {
        "summary": "Get metadata for all registered operators on Eigenlayer",
        "description": "Get metadata for all registered operators on Eigenlayer, including `operator_name`, `operator_contract_address`, `website`, `twitter`, `logo`, `description`",
        "operationId": "operatorMetadata",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 10,
            "description": "Limit number of rows to return. This together with 'offset' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Offset row number to start (inclusive, first row means offset=0) returning results from. This together with 'limit' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to filter out rows from the results to return. This expression is similar to a SQL WHERE clause. More details about it in the Filtering section of the doc. This parameter is incompatible with `sample_count`."
          },
          {
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to define the order in which the results should be returned. This expression is similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "type": "string",
                      "description": "Unique identifier for the execution",
                      "example": "01HWZGF2ZVKYAV05VHNK0PCJRC"
                    },
                    "query_id": {
                      "type": "integer",
                      "description": "Unique identifier for the query",
                      "example": 3685760
                    },
                    "is_execution_finished": {
                      "type": "boolean",
                      "description": "Flag to indicate if the execution is finished",
                      "example": true
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the query execution",
                      "example": "QUERY_STATE_COMPLETED"
                    },
                    "submitted_at": {
                      "type": "string",
                      "description": "Time when the query was submitted",
                      "example": "2024-05-03T15:16:50.299289Z"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "Time when the query will expire",
                      "example": "2024-08-01T15:16:50.598891Z"
                    },
                    "execution_started_at": {
                      "type": "string",
                      "description": "Time when the execution started",
                      "example": "2024-05-03T15:16:50.513757Z"
                    },
                    "execution_ended_at": {
                      "type": "string",
                      "description": "Time when the execution ended",
                      "example": "2024-05-03T15:16:50.59889Z"
                    },
                    "result": {
                      "type": "object",
                      "description": "results from query",
                      "example": {
                        "rows": [
                          {
                            "description": "Securely validating one block at a time since 2019",
                            "logo": "https://raw.githubusercontent.com/01node/eigenlayer/main/01node.png",
                            "operator_contract_address": "0x09e6eb09213bdd3698bd8afb43ec3cb0ecff683e",
                            "operator_name": "01node",
                            "twitter": "https://x.com/01node",
                            "website": "https://01node.com"
                          },
                          {
                            "description": "I am a freeman who supports a free world",
                            "logo": "https://raw.githubusercontent.com/090shaman/090eigenlayer/main/746e64623776657661646d766131653262697a746e646237766562793237386d.png",
                            "operator_contract_address": "0x9ab19c3584d6a464de783add16585c6115938ff1",
                            "operator_name": "090",
                            "twitter": "https://twitter.com/HopetoCash",
                            "website": "https://www.artyfactory.com/egyptian_art/egyptian_hieroglyphs/hieroglyphs.htm#google_vignette"
                          },
                          {
                            "description": "I am a free man who likes a free woman",
                            "logo": "https://raw.githubusercontent.com/090shaman/090z-eigenlayer/main/6976346366377a67366961716a793538396d7332306976346366377a72377738.png",
                            "operator_contract_address": "0x1e8e63d18dd0535034345655cbe671a26450ccae",
                            "operator_name": "090z",
                            "twitter": "https://twitter.com/HopetoCash",
                            "website": "https://www.thelostbookproject.com/products/13-books-on-the-illuminati-conspiracy"
                          },
                          {
                            "description": "Networking hub for the strongest",
                            "logo": "https://raw.githubusercontent.com/bazilik111/EigenDA/main/classic0y.png",
                            "operator_contract_address": "0xd172a86a0f250aec23ee19c759a8e73621fe3c10",
                            "operator_name": "0Y [all AVS]",
                            "twitter": "https://twitter.com/in0ywetrust",
                            "website": "https://0y.io/"
                          },
                          {
                            "description": "0x718",
                            "logo": "https://raw.githubusercontent.com/cryptochen1/Eigen/main/berafy-image%20(1).png",
                            "operator_contract_address": "0x6ee96aae6a6d66ae6b68232fe62b6f1466808859",
                            "operator_name": "0x718",
                            "twitter": "https://twitter.com/chengua14011353",
                            "website": "https://0x718.xyz"
                          },
                          {
                            "description": "A french in the blockchain",
                            "logo": "https://raw.githubusercontent.com/Matthis-Herbrecht/Eigen-node/main/38303764787735657a3562686730356438303764787775316932733331746a39.png",
                            "operator_contract_address": "0x3723d6a0bc27f1e1c8cd79f4e775473ee16355f9",
                            "operator_name": "0xAkina_",
                            "twitter": "https://twitter.com/0xAkina_",
                            "website": "https://pokenomix.fr/"
                          },
                          {
                            "description": "EasyNode co-founder. Gentleman farmer & Horse rider.",
                            "logo": "https://raw.githubusercontent.com/maximegris/node_registrations/main/2cRqgI4xQvdkCoaqyrGV4mjhiQL.png",
                            "operator_contract_address": "0x3de33d187441cf102c79513323c1e5526908937c",
                            "operator_name": "0xBelnadris",
                            "twitter": "https://twitter.com/0xBelnadris",
                            "website": "https://app.easy-node.xyz"
                          },
                          {
                            "description": "EasyNode co-founder. Gentleman farmer & Horse rider.",
                            "logo": "https://raw.githubusercontent.com/maximegris/node_registrations/main/2cRqgI4xQvdkCoaqyrGV4mjhiQL.png",
                            "operator_contract_address": "0xd38d980188604c7051dbce2980a0c6e38423fda4",
                            "operator_name": "0xBelnadris",
                            "twitter": "https://twitter.com/0xBelnadris",
                            "website": "https://app.easy-node.xyz"
                          },
                          {
                            "description": "EasyNode co-founder. Gentleman farmer & Horse rider.",
                            "logo": "https://raw.githubusercontent.com/maximegris/node_registrations/main/2cRqgI4xQvdkCoaqyrGV4mjhiQM.png",
                            "operator_contract_address": "0x7044e8ed725aaf308a0550de42cc24c75ec155ca",
                            "operator_name": "0xBelnadris1",
                            "twitter": "https://twitter.com/0xBelnadris",
                            "website": "https://app.easy-node.xyz"
                          },
                          {
                            "description": "I love cats!",
                            "logo": "https://raw.githubusercontent.com/kevingau/eigenlayer-cli/master/pkg/operator/config/dali.png",
                            "operator_contract_address": "0x602b9f3fc0824dd5fd4364d0925b4099a64da5a9",
                            "operator_name": "0xCat",
                            "twitter": "https://twitter.com/twkgau",
                            "website": "https://twitter.com/twkgau"
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Metadata for the query",
                      "example": {
                        "column_names": [
                          "operator_name",
                          "operator_contract_address",
                          "website",
                          "twitter",
                          "logo",
                          "description"
                        ],
                        "column_types": [
                          "varchar",
                          "varbinary",
                          "varchar",
                          "varchar",
                          "varchar",
                          "varchar"
                        ],
                        "row_count": 10,
                        "result_set_bytes": 2792,
                        "total_row_count": 1252,
                        "total_result_set_bytes": 307692,
                        "datapoint_count": 60,
                        "pending_time_millis": 214,
                        "execution_time_millis": 85
                      }
                    },
                    "next_uri": {
                      "type": "string",
                      "description": "URI to get the next set of results",
                      "example": "https://api.dune.com/api/v1/execution/01HWZGF2ZVKYAV05VHNK0PCJRC/results?limit=10&offset=10&sort_by=operator_name+asc"
                    },
                    "next_offset": {
                      "type": "integer",
                      "description": "Offset to get the next set of results",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Core request validation failed, make sure you've given required columns and followed formatting rules for the CSV (no special characters or digits in column names)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eigenlayer/operator-stats": {
      "get": {
        "summary": "Get metrics for operators on Eigenlayer",
        "description": "Get metrics for operators, including `operator_name`, `operator_contract_address`, `total_TVL`, `num_stakers`, and TVL for each strategy like cbETH, stETH",
        "operationId": "operatorStats",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 10,
            "description": "Limit number of rows to return. This together with 'offset' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Offset row number to start (inclusive, first row means offset=0) returning results from. This together with 'limit' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to filter out rows from the results to return. This expression is similar to a SQL WHERE clause. More details about it in the Filtering section of the doc. This parameter is incompatible with `sample_count`."
          },
          {
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to define the order in which the results should be returned. This expression is similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "type": "string",
                      "description": "Unique identifier for the execution",
                      "example": "01HWZGCXN0EN55SDB3DXDS5PKH"
                    },
                    "query_id": {
                      "type": "integer",
                      "description": "Unique identifier for the query",
                      "example": 3685928
                    },
                    "is_execution_finished": {
                      "type": "boolean",
                      "description": "Flag to indicate if the execution is finished",
                      "example": true
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the query execution",
                      "example": "QUERY_STATE_COMPLETED"
                    },
                    "submitted_at": {
                      "type": "string",
                      "description": "Time when the query was submitted",
                      "example": "2024-05-03T15:15:39.296185Z"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "Time when the query will expire",
                      "example": "2024-08-01T15:15:49.40575Z"
                    },
                    "execution_started_at": {
                      "type": "string",
                      "description": "Time when the execution started",
                      "example": "2024-05-03T15:15:39.716037Z"
                    },
                    "execution_ended_at": {
                      "type": "string",
                      "description": "Time when the execution ended",
                      "example": "2024-05-03T15:15:49.405748Z"
                    },
                    "result": {
                      "type": "object",
                      "description": "results from query",
                      "example": {
                        "rows": [
                          {
                            "ETHx_TVL": 39.72676274338925,
                            "OETH_TVL": 2.538990279155831,
                            "ankrETH_TVL": 39.07899148503818,
                            "beacon_chain_ETH_TVL": 262304,
                            "cbETH_TVL": 2917.708466683773,
                            "num_stakers": 4698,
                            "lsETH_TVL": 0.3047357028624452,
                            "mETH_TVL": 10687.099781868677,
                            "operator_contract_address": "0xdbed88d83176316fc46797b43adee927dc2ff2f5",
                            "operator_name": "P2P.org [all AVS]",
                            "osETH_TVL": 109.99440768266442,
                            "rETH_TVL": 2162.4343961168584,
                            "sfrxETH_TVL": 500.25007912584033,
                            "stETH_TVL": 30981.86706609101,
                            "swETH_TVL": 15089.156933547152,
                            "total_TVL": 328139.19906218635,
                            "wBETH_TVL": 3305.0384508599996
                          },
                          {
                            "ETHx_TVL": 0,
                            "OETH_TVL": 0,
                            "ankrETH_TVL": 0,
                            "beacon_chain_ETH_TVL": 266496,
                            "cbETH_TVL": 0,
                            "num_stakers": 3,
                            "lsETH_TVL": 0,
                            "mETH_TVL": 0,
                            "operator_contract_address": "0x865cae37b4f44e73ea1e79577c5bfc6207c98f16",
                            "operator_name": "Renzo Operated By P2P.org",
                            "osETH_TVL": 0,
                            "rETH_TVL": 0,
                            "sfrxETH_TVL": 0,
                            "stETH_TVL": 1832.528759176602,
                            "swETH_TVL": 0,
                            "total_TVL": 269236.17616926,
                            "wBETH_TVL": 907.6474100833987
                          },
                          {
                            "ETHx_TVL": 0,
                            "OETH_TVL": 0,
                            "ankrETH_TVL": 0,
                            "beacon_chain_ETH_TVL": 268064,
                            "cbETH_TVL": 0,
                            "num_stakers": 3,
                            "lsETH_TVL": 0,
                            "mETH_TVL": 0,
                            "operator_contract_address": "0x5cd6fdfad710609c828feba2508bcaf89e80501a",
                            "operator_name": "Renzo Operated By Luganodes",
                            "osETH_TVL": 0,
                            "rETH_TVL": 0,
                            "sfrxETH_TVL": 0,
                            "stETH_TVL": 407.8172229341362,
                            "swETH_TVL": 0,
                            "total_TVL": 269198.13822017645,
                            "wBETH_TVL": 726.3209972422893
                          },
                          {
                            "ETHx_TVL": 0,
                            "OETH_TVL": 0,
                            "ankrETH_TVL": 0,
                            "beacon_chain_ETH_TVL": 269088,
                            "cbETH_TVL": 0,
                            "num_stakers": 1,
                            "lsETH_TVL": 0,
                            "mETH_TVL": 0,
                            "operator_contract_address": "0xdfcb21ac9b99de986d99f4ce5fce2a6542efe3a1",
                            "operator_name": "Renzo Operated by Figment",
                            "osETH_TVL": 0,
                            "rETH_TVL": 0,
                            "sfrxETH_TVL": 0,
                            "stETH_TVL": 0,
                            "swETH_TVL": 0,
                            "total_TVL": 269088,
                            "wBETH_TVL": 0
                          },
                          {
                            "ETHx_TVL": 16.2447781872404,
                            "OETH_TVL": 0.24865174594643008,
                            "ankrETH_TVL": 0,
                            "beacon_chain_ETH_TVL": 182745,
                            "cbETH_TVL": 103.28372358600161,
                            "num_stakers": 6577,
                            "lsETH_TVL": 0,
                            "mETH_TVL": 80.6570194622594,
                            "operator_contract_address": "0xfb487f216ca24162119c0c6ae015d680d7569c2f",
                            "operator_name": "ether.fi-1 <> Pier Two",
                            "osETH_TVL": 49.39026153850236,
                            "rETH_TVL": 1250.9127473835508,
                            "sfrxETH_TVL": 18.944119795875547,
                            "stETH_TVL": 764.8748564809325,
                            "swETH_TVL": 554.2320304424923,
                            "total_TVL": 185585.36044363276,
                            "wBETH_TVL": 1.5722550100000063
                          },
                          {
                            "ETHx_TVL": 2.3997920560684998,
                            "OETH_TVL": 0.10008721281889629,
                            "ankrETH_TVL": 10.37485180236841,
                            "beacon_chain_ETH_TVL": 182272,
                            "cbETH_TVL": 44.06779655214034,
                            "num_stakers": 7247,
                            "lsETH_TVL": 0.010077783567023156,
                            "mETH_TVL": 16.89900852059259,
                            "operator_contract_address": "0x5b9b3cf0202a1a3dc8f527257b7e6002d23d8c85",
                            "operator_name": "ether.fi-8",
                            "osETH_TVL": 0.3972366136751449,
                            "rETH_TVL": 66.98854679830559,
                            "sfrxETH_TVL": 1.0510951614459123,
                            "stETH_TVL": 261.3614288314667,
                            "swETH_TVL": 313.80964746010443,
                            "total_TVL": 183009.24977970254,
                            "wBETH_TVL": 19.79021091
                          },
                          {
                            "ETHx_TVL": 0,
                            "OETH_TVL": 0,
                            "ankrETH_TVL": 0,
                            "beacon_chain_ETH_TVL": 128416,
                            "cbETH_TVL": 0,
                            "num_stakers": 359,
                            "lsETH_TVL": 0,
                            "mETH_TVL": 0,
                            "operator_contract_address": "0x5dcdf02a7188257b7c37dd3158756da9ccd4a9cb",
                            "operator_name": "Renzo Operated by Pier Two",
                            "osETH_TVL": 0,
                            "rETH_TVL": 0,
                            "sfrxETH_TVL": 0,
                            "stETH_TVL": 17358.80482730289,
                            "swETH_TVL": 0,
                            "total_TVL": 157740.89652721505,
                            "wBETH_TVL": 11966.091699912165
                          },
                          {
                            "ETHx_TVL": 44.571536798594366,
                            "OETH_TVL": 0,
                            "ankrETH_TVL": 0,
                            "beacon_chain_ETH_TVL": 137210,
                            "cbETH_TVL": 432.37516797029485,
                            "num_stakers": 3532,
                            "lsETH_TVL": 0,
                            "mETH_TVL": 1.7324242873825464,
                            "operator_contract_address": "0x4bd479a34450d0cb1f5ef16a877bee47e1e4cdb9",
                            "operator_name": "ether.fi-2 <> P2P.org",
                            "osETH_TVL": 0.1010442329934449,
                            "rETH_TVL": 67.71598118744946,
                            "sfrxETH_TVL": 0,
                            "stETH_TVL": 49.44701088461056,
                            "swETH_TVL": 79.76292046624349,
                            "total_TVL": 137886.3213279576,
                            "wBETH_TVL": 0.61524213
                          },
                          {
                            "ETHx_TVL": 120.04481652304437,
                            "OETH_TVL": 3684.5357853639366,
                            "ankrETH_TVL": 22.543735072447774,
                            "beacon_chain_ETH_TVL": 66272,
                            "cbETH_TVL": 2892.3471598961264,
                            "num_stakers": 9637,
                            "lsETH_TVL": 8.392081968559486,
                            "mETH_TVL": 1983.7465261576265,
                            "operator_contract_address": "0x5accc90436492f24e6af278569691e2c942a676d",
                            "operator_name": "EigenYields",
                            "osETH_TVL": 11251.736351471029,
                            "rETH_TVL": 4926.23876883258,
                            "sfrxETH_TVL": 1206.1794699189252,
                            "stETH_TVL": 30275.219028916843,
                            "swETH_TVL": 11230.405006967536,
                            "total_TVL": 134830.99718321697,
                            "wBETH_TVL": 957.6084521283016
                          },
                          {
                            "ETHx_TVL": 0,
                            "OETH_TVL": 0,
                            "ankrETH_TVL": 0,
                            "beacon_chain_ETH_TVL": 104689,
                            "cbETH_TVL": 0.9592248165392796,
                            "num_stakers": 3343,
                            "lsETH_TVL": 0,
                            "mETH_TVL": 5.356722201647969,
                            "operator_contract_address": "0xea50bb6735703422d2e053452f1f28bff17da51f",
                            "operator_name": "ether.fi-4 <> Finoa Consensus Services",
                            "osETH_TVL": 0,
                            "rETH_TVL": 8.846736396691934,
                            "sfrxETH_TVL": 0.561292356700608,
                            "stETH_TVL": 32.18043991131824,
                            "swETH_TVL": 75.38933965683869,
                            "total_TVL": 104821.43289993975,
                            "wBETH_TVL": 9.1391446
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Metadata for the query",
                      "example": {
                        "column_names": [
                          "operator_name",
                          "operator_contract_address",
                          "total_TVL",
                          "num_stakers",
                          "cbETH_TVL",
                          "stETH_TVL",
                          "rETH_TVL",
                          "ETHx_TVL",
                          "ankrETH_TVL",
                          "OETH_TVL",
                          "osETH_TVL",
                          "swETH_TVL",
                          "wBETH_TVL",
                          "sfrxETH_TVL",
                          "lsETH_TVL",
                          "mETH_TVL",
                          "beacon_chain_ETH_TVL"
                        ],
                        "column_types": [
                          "varchar",
                          "varbinary",
                          "double",
                          "bigint",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double",
                          "double"
                        ],
                        "row_count": 10,
                        "result_set_bytes": 2584,
                        "total_row_count": 431,
                        "total_result_set_bytes": 63922,
                        "datapoint_count": 170,
                        "pending_time_millis": 419,
                        "execution_time_millis": 9689
                      }
                    },
                    "next_uri": {
                      "type": "string",
                      "description": "URI to get the next set of results",
                      "example": "https://api.dune.com/api/v1/execution/01HWZGCXN0EN55SDB3DXDS5PKH/results?limit=10&offset=10&sort_by=total_TVL+desc"
                    },
                    "next_offset": {
                      "type": "integer",
                      "description": "Offset to get the next set of results",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Core request validation failed, make sure you've given required columns and followed formatting rules for the CSV (no special characters or digits in column names)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/eigenlayer/operator-to-avs-mapping": {
      "get": {
        "summary": "Get a mapping of which operator is registered on which AVS, including the time of registration",
        "description": "Get a mapping of which operator is registered on which AVS, including the time of registration",
        "operationId": "operatorAVSMap",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 10,
            "description": "Limit number of rows to return. This together with 'offset' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Offset row number to start (inclusive, first row means offset=0) returning results from. This together with 'limit' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to filter out rows from the results to return. This expression is similar to a SQL WHERE clause. More details about it in the Filtering section of the doc. This parameter is incompatible with `sample_count`."
          },
          {
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to define the order in which the results should be returned. This expression is similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "type": "string",
                      "description": "Unique identifier for the execution",
                      "example": "01HWZG0P9WNJ1K806DY82RB5JV"
                    },
                    "query_id": {
                      "type": "integer",
                      "description": "Unique identifier for the query",
                      "example": 3685583
                    },
                    "is_execution_finished": {
                      "type": "boolean",
                      "description": "Flag to indicate if the execution is finished",
                      "example": true
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the query execution",
                      "example": "QUERY_STATE_COMPLETED"
                    },
                    "submitted_at": {
                      "type": "string",
                      "description": "Time when the query was submitted",
                      "example": "2024-05-03T15:08:58.556557Z"
                    },
                    "expires_at": {
                      "type": "string",
                      "description": "Time when the query will expire",
                      "example": "2024-08-01T15:10:03.540464Z"
                    },
                    "execution_started_at": {
                      "type": "string",
                      "description": "Time when the execution started",
                      "example": "2024-05-03T15:08:59.024876Z"
                    },
                    "execution_ended_at": {
                      "type": "string",
                      "description": "Time when the execution ended",
                      "example": "2024-05-03T15:10:03.540463Z"
                    },
                    "result": {
                      "type": "object",
                      "description": "results from query",
                      "example": {
                        "rows": [
                          {
                            "avs_contract_address": "0xd50e0931703302b080880c45148f5d83ea66ae2a",
                            "avs_name": "DODOchain MACH (Powered by AltLayer)",
                            "avs_website": "https://www.dodochain.com/",
                            "operator_contract_address": "0xa42cd0029f681b08b61f535e846f2a36f468c1c2",
                            "operator_name": "Nodes.Guru [All AVS]",
                            "operator_website": "https://nodes.guru",
                            "registered_time": "2024-05-03 14:28:11.000 UTC"
                          },
                          {
                            "avs_contract_address": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0",
                            "avs_name": "EigenDA",
                            "avs_website": "https://docs.eigenlayer.xyz/eigenda/overview/",
                            "operator_contract_address": "0x67943ae8e07bfc9f5c9a90d608f7923d9c21e051",
                            "operator_name": "ether.fi-10",
                            "operator_website": "https://ether.fi",
                            "registered_time": "2024-05-03 13:47:35.000 UTC"
                          },
                          {
                            "avs_contract_address": "0xd50e0931703302b080880c45148f5d83ea66ae2a",
                            "avs_name": "DODOchain MACH (Powered by AltLayer)",
                            "avs_website": "https://www.dodochain.com/",
                            "operator_contract_address": "0xe483c7f156b25da9be6220049e5111bb41c4c535",
                            "operator_name": "Everstake",
                            "operator_website": "https://everstake.one",
                            "registered_time": "2024-05-03 12:36:11.000 UTC"
                          },
                          {
                            "avs_contract_address": "0xd25c2c5802198cb8541987b73a8db4c9bcae5cc7",
                            "avs_name": "Witness Chain",
                            "avs_website": "https://www.witnesschain.com",
                            "operator_contract_address": "0xa8b322f27c8dfc69f220d3f19a57f8fd193392a4",
                            "operator_name": "Forbole",
                            "operator_website": "https://forbole.com",
                            "registered_time": "2024-05-03 10:41:59.000 UTC"
                          },
                          {
                            "avs_contract_address": "0xd50e0931703302b080880c45148f5d83ea66ae2a",
                            "avs_name": "DODOchain MACH (Powered by AltLayer)",
                            "avs_website": "https://www.dodochain.com/",
                            "operator_contract_address": "0x778328d6adca7a091f0b73d41ad8ea0e793712c3",
                            "operator_name": "Blockscape",
                            "operator_website": "https://blockscape.network",
                            "registered_time": "2024-05-03 09:39:11.000 UTC"
                          },
                          {
                            "avs_contract_address": "0x870679e138bcdf293b7ff14dd44b70fc97e12fc0",
                            "avs_name": "EigenDA",
                            "avs_website": "https://docs.eigenlayer.xyz/eigenda/overview/",
                            "operator_contract_address": "0x5b9b3cf0202a1a3dc8f527257b7e6002d23d8c85",
                            "operator_name": "ether.fi-8",
                            "operator_website": "https://ether.fi",
                            "registered_time": "2024-05-03 08:36:47.000 UTC"
                          },
                          {
                            "avs_contract_address": "0xd50e0931703302b080880c45148f5d83ea66ae2a",
                            "avs_name": "DODOchain MACH (Powered by AltLayer)",
                            "avs_website": "https://www.dodochain.com/",
                            "operator_contract_address": "0xa83e07353a9ed2af88e7281a2fa7719c01356d8e",
                            "operator_name": "A41 [all AVS]",
                            "operator_website": "https://www.a41.io",
                            "registered_time": "2024-05-03 06:01:11.000 UTC"
                          },
                          {
                            "avs_contract_address": "0xd50e0931703302b080880c45148f5d83ea66ae2a",
                            "avs_name": "DODOchain MACH (Powered by AltLayer)",
                            "avs_website": "https://www.dodochain.com/",
                            "operator_contract_address": "0x6011a26ede811b22d9979a1dc4d341bc1d683c37",
                            "operator_name": "IOSG Ventures",
                            "operator_website": "https://iosg.vc/",
                            "registered_time": "2024-05-03 05:46:59.000 UTC"
                          },
                          {
                            "avs_contract_address": "0xd50e0931703302b080880c45148f5d83ea66ae2a",
                            "avs_name": "DODOchain MACH (Powered by AltLayer)",
                            "avs_website": "https://www.dodochain.com/",
                            "operator_contract_address": "0x515b0ce079114fe6df9a3a3d7b5c1ae5a2656cd8",
                            "operator_name": "dao5",
                            "operator_website": "https://dao5.com/",
                            "registered_time": "2024-05-03 05:44:47.000 UTC"
                          },
                          {
                            "avs_contract_address": "0xd50e0931703302b080880c45148f5d83ea66ae2a",
                            "avs_name": "DODOchain MACH (Powered by AltLayer)",
                            "avs_website": "https://www.dodochain.com/",
                            "operator_contract_address": "0xf1cbc3f2dbfec8d209b63f635319315e216024fb",
                            "operator_name": "Primitive Ventures",
                            "operator_website": "http://primitive.ventures",
                            "registered_time": "2024-05-03 05:40:59.000 UTC"
                          }
                        ]
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Metadata for the query",
                      "example": {
                        "column_names": [
                          "avs_contract_address",
                          "avs_name",
                          "avs_website",
                          "operator_contract_address",
                          "operator_name",
                          "operator_website",
                          "registered_time"
                        ],
                        "column_types": [
                          "varbinary",
                          "varchar",
                          "varchar",
                          "varbinary",
                          "varchar",
                          "varchar",
                          "timestamp with time zone"
                        ],
                        "row_count": 10,
                        "result_set_bytes": 2343,
                        "total_row_count": 528,
                        "total_result_set_bytes": 107043,
                        "datapoint_count": 70,
                        "pending_time_millis": 468,
                        "execution_time_millis": 64515
                      }
                    },
                    "next_uri": {
                      "type": "string",
                      "description": "URI to get the next set of results",
                      "example": "https://api.dune.com/api/v1/execution/01HWZG0P9WNJ1K806DY82RB5JV/results?limit=10&offset=10&sort_by=registered_time+desc"
                    },
                    "next_offset": {
                      "type": "integer",
                      "description": "Offset to get the next set of results",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Core request validation failed, make sure you've given required columns and followed formatting rules for the CSV (no special characters or digits in column names)"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "401 unauthorized error for invalid API key",
            "example": "invalid API Key"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message for resource not found",
            "example": "The requested resource was not found."
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "internal error"
          }
        },
        "description": "Generic error message, given when an unexpected condition is encountered and no more specific message is available. Please consult the API documentation for more details."
      }
    }
  }
}
