{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI for Query and Execution API",
    "description": "API for Querying and Reading Dune Data",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.dune.com/api"
    }
  ],
  "paths": {
    "/v1/query/{query_id}/execute": {
      "post": {
        "description": "Execute, or run a query for the specified query ID",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "unique identifier of the query"
          },
          {
            "in": "query",
            "name": "performance",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Performance"
              }
            },
            "description": "The performance engine tier the execution will be run on. Can be either medium or large. Medium consumes 10 credits, and large consumes 20 credits, per run. Default is medium."
          },
          {
            "in": "query",
            "name": "query_parameters",
            "required": false,
            "explode": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ParameterObject"
              }
            },
            "description": "SQL Query parameters in key-value pairs. Each parameter is to be provided in key-value pairs. This enables you to execute a parameterized query with the provided values for your parameter keys. Partial submission of parameters is allowed. For example, if the query expects three parameters and you only pass in two, the third one will automatically use its default value as defined in the Query Parameter Editor page."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "execution_id": "01HKZJ2683PHF9Q9PHHQ8FW4Q1",
                  "state": "QUERY_STATE_PENDING"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be processed by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "403": {
            "description": "StatusForbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "Not allowed to execute query. Query is archived, unsaved or not enough permissions."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/execution/{execution_id}/cancel": {
      "post": {
        "description": "Cancel a triggered execution request given the execution ID",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "unique identifier of the execution"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "The requested execution ID (ID: \"01HKZSP2CQHJY17BPVDF91T925\") is invalid."
                }
              }
            }
          },
          "404": {
            "description": "StatusNotFound",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "The requested execution ID (ID 01HKZS6KF0TDBPVJHHK9T5FDEN) was not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/execution/{execution_id}/status": {
      "get": {
        "description": "Check the status of an execution request",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "unique identifier of the execution"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/query/{query_id}/results": {
      "get": {
        "description": "Given a query ID, returns the latest executed result of a query on Dune",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "unique identifier of the query"
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Limit number of rows to return. This together with 'offset' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Offset row number to start (inclusive, first row means offset=0) returning results from. This together with 'limit' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "sample_count",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of rows to return from the result by sampling the data. This is useful when you want to get a uniform sample instead of the entire result. If the result has less than the sample count, the entire result is returned. Note that this will return a randomized sample, so not every call will return the same result. This parameter is incompatible with `offset`, `limit`, and `filters` parameters."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to filter out rows from the results to return. This expression is similar to a SQL WHERE clause. More details about it in the Filtering section of the doc. This parameter is incompatible with `sample_count`."
          },
          {
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expressiong to define the order in which the results should be returned. This expression is similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc."
          },
          {
            "in": "query",
            "name": "columns",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Specifies a comma-separated list of column names to return. If omitted, all columns are included. Tip: use this to limit the result to specific columns, reducing datapoints cost of the call."
          },
          {
            "in": "query",
            "name": "query_parameters",
            "required": false,
            "explode": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ParameterObject"
              }
            },
            "description": "SQL Query parameters in key-value pairs. Each parameter is to be provided in key-value pairs. This enables you to execute a parameterized query with the provided values for your parameter keys. Partial submission of parameters is allowed. For example, if the query expects three parameters and you only pass in two, the third one will automatically use its default value as defined in the Query Parameter Editor page."
          },
          {
            "in": "query",
            "name": "ignore_max_datapoints_per_request",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add ignore_max_datapoints_per_request=true"
          },
          {
            "in": "query",
            "name": "allow_partial_results",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "This enables returning a query result that was too large and only a partial result is available. By default allow_partial_results is set to false and a failed state is returned."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/query/{query_id}/results/csv": {
      "get": {
        "description": "Given a query ID, returns the latest executed result of a query on Dune in CSV format",
        "operationId": "GetQueryResultsCSV",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "path",
            "name": "query_id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "unique identifier of the query"
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Limit number of rows to return. This together with 'offset' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Offset row number to start (inclusive, first row means offset=0) returning results from. This together with 'limit' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "sample_count",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of rows to return from the result by sampling the data. This is useful when you want to get a uniform sample instead of the entire result. If the result has less than the sample count, the entire result is returned. Note that this will return a randomized sample, so not every call will return the same result. This parameter is incompatible with `offset`, `limit`, and `filters` parameters."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to filter out rows from the results to return. This expression is similar to a SQL WHERE clause. More details about it in the Filtering section of the doc. This parameter is incompatible with `sample_count`."
          },
          {
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expressiong to define the order in which the results should be returned. This expression is similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc."
          },
          {
            "in": "query",
            "name": "columns",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Specifies a comma-separated list of column names to return. If omitted, all columns are included. Tip: use this to limit the result to specific columns, reducing datapoints cost of the call."
          },
          {
            "in": "query",
            "name": "parameters",
            "required": false,
            "explode": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ParameterObject"
              }
            },
            "description": "SQL Query parameters in key-value pairs. Each parameter is to be provided in key-value pairs. This enables you to execute a parameterized query with the provided values for your parameter keys. Partial submission of parameters is allowed. For example, if the query expects three parameters and you only pass in two, the third one will automatically use its default value as defined in the Query Parameter Editor page."
          },
          {
            "in": "query",
            "name": "ignore_max_datapoints_per_request",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add ignore_max_datapoints_per_request=true"
          },
          {
            "in": "query",
            "name": "allow_partial_results",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "This enables returning a query result that was too large and only a partial result is available. By default allow_partial_results is set to false and a failed state is returned."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "x-dune-next-offset": {
                "description": "Offset to use to retrieve the next page of results if available.",
                "schema": {
                  "type": "integer"
                }
              },
              "x-dune-next-uri": {
                "description": "URI to retrieve the next page of results if available.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "Rank,project,Total Volume,7 Days Volume,24 Hours Volume1,opensea,3.8364306116397446e+10,3.237919758883639e+07,3.3571613299256647e+06\n2,blur,8.183380589763865e+09,1.7107657915764195e+08,1.5850010061459592e+07\n3,x2y2,5.460294391448603e+09,4.0788931813965896e+06,223304.96681753657\n4,cryptopunks,2.675936453044167e+09,2.1720323415680006e+06,716042.4500000001\n5,looksrare,1.5984313877385368e+09,501530.0226954725,50185.290415\n6,superrare,3.044450076292612e+08,454080.3801810001,2711.41353\n7,foundation,2.22984396521278e+08,170730.43359724514,18791.057531650004\n8,sudoswap,1.1065119839239097e+08,91405.45237984283,49641.91309616044\n9,mooar,9.370740688511379e+07,3.816546773342194e+07,4.211704339041664e+06\n10,pancakeswap,8.577468809809853e+07,42632.499992789955,5097.792944599999\n11,tofu,6.714663559364942e+07,76521.97898920579,5380.136450808099\n12,element,6.122191042346895e+07,74343.29233116966,21615.498594265555\n13,zora,4.001828856803733e+07,<nil>,<nil>\n14,liquidifty,2.9701757197915018e+07,0.029847000000000005,0.029847000000000005\n15,quix,1.0831134834643008e+07,<nil>,<nil>\n16,magiceden,9.29307966848028e+06,4454.432874887,87.15784495\n17,rarible,5.376697231248505e+06,51386.83617665664,4985.105076420629\n18,archipelago,5.37401337817133e+06,<nil>,<nil>\n19,aavegotchi,3.0300035670567774e+06,20759.276957762435,3149.030878339999\n20,nftrade,1.7161576961230598e+06,26676.274663999986,106.961753999999\n21,dew,1.4541526609272424e+06,<nil>,<nil>\n22,nftb,1.336229907297191e+06,<nil>,<nil>\n23,decentraland,401287.6963697007,1036.6580888416527,60.78021429999997\n24,zonic,300264.3745252976,72.93842523849997,12.032011452799999\n25,nftearth,84818.42127523685,<nil>,<nil>\n26,aurem,464.10303347643816,9.788748,<nil>\n27,fractal,183.85717919121993,<nil>,<nil>\n28,oneplanet,131.71013616000002,<nil>,<nil>"
              }
            }
          },
          "400": {
            "description": "Bad Request - The request could not be understood by the server due to malformed syntax or validation failure.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/execution/{execution_id}/results": {
      "get": {
        "description": "Given an execution ID, returns result of a an execution request",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "unique identifier of the execution"
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Limit number of rows to return. This together with 'offset' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Offset row number to start (inclusive, first row means offset=0) returning results from. This together with 'limit' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "sample_count",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of rows to return from the result by sampling the data. This is useful when you want to get a uniform sample instead of the entire result. If the result has less than the sample count, the entire result is returned. Note that this will return a randomized sample, so not every call will return the same result. This parameter is incompatible with `offset`, `limit`, and `filters` parameters."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to filter out rows from the results to return. This expression is similar to a SQL WHERE clause. More details about it in the Filtering section of the doc. This parameter is incompatible with `sample_count`."
          },
          {
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expressiong to define the order in which the results should be returned. This expression is similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc."
          },
          {
            "in": "query",
            "name": "columns",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Specifies a comma-separated list of column names to return. If omitted, all columns are included. Tip: use this to limit the result to specific columns, reducing datapoints cost of the call."
          },
          {
            "in": "query",
            "name": "ignore_max_datapoints_per_request",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add ignore_max_datapoints_per_request=true"
          },
          {
            "in": "query",
            "name": "allow_partial_results",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "This enables returning a query result that was too large and only a partial result is available. By default allow_partial_results is set to false and a failed state is returned."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "The requested execution ID (ID: 01HKZW3PD00VEX36QYZ1FNRA3) is invalid."
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/execution/{execution_id}/results/csv": {
      "get": {
        "description": "Given an execution ID, returns result of a an execution request in CSV format",
        "parameters": [
          {
            "in": "header",
            "name": "X-DUNE-API-KEY",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service",
            "required": true
          },
          {
            "in": "query",
            "name": "api_key",
            "schema": {
              "type": "string"
            },
            "description": "API Key for the service, alternative to using the HTTP header X-DUNE-API-KEY.",
            "required": false
          },
          {
            "in": "path",
            "name": "execution_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "unique identifier of the execution"
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Limit number of rows to return. This together with 'offset' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Offset row number to start (inclusive, first row means offset=0) returning results from. This together with 'limit' allows easy pagination through results in an incremental and efficient way. This parameter is incompatible with sampling (sample_count)."
          },
          {
            "in": "query",
            "name": "sample_count",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Number of rows to return from the result by sampling the data. This is useful when you want to get a uniform sample instead of the entire result. If the result has less than the sample count, the entire result is returned. Note that this will return a randomized sample, so not every call will return the same result. This parameter is incompatible with `offset`, `limit`, and `filters` parameters."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expression to filter out rows from the results to return. This expression is similar to a SQL WHERE clause. More details about it in the Filtering section of the doc. This parameter is incompatible with `sample_count`."
          },
          {
            "in": "query",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Expressiong to define the order in which the results should be returned. This expression is similar to a SQL ORDER BY clause. More details about it in the Sorting section of the doc."
          },
          {
            "in": "query",
            "name": "columns",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Specifies a comma-separated list of column names to return. If omitted, all columns are included. Tip: use this to limit the result to specific columns, reducing datapoints cost of the call."
          },
          {
            "in": "query",
            "name": "ignore_max_datapoints_per_request",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "There is a default 250,000 datapoints limit to make sure you don't accidentally spend all your credits in one call. To ignore the max limit, you can add ignore_max_datapoints_per_request=true"
          },
          {
            "in": "query",
            "name": "allow_partial_results",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "This enables returning a query result that was too large and only a partial result is available. By default allow_partial_results is set to false and a failed state is returned."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "x-dune-next-offset": {
                "description": "Offset to use to retrieve the next page of results if available.",
                "schema": {
                  "type": "integer"
                }
              },
              "x-dune-next-uri": {
                "description": "URI to retrieve the next page of results if available.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                },
                "example": "Rank,project,Total Volume,7 Days Volume,24 Hours Volume\n1,opensea,3.8364306116397446e+10,3.237919758883639e+07,3.3571613299256647e+06\n2,blur,8.183380589763865e+09,1.7107657915764195e+08,1.5850010061459592e+07\n3,x2y2,5.460294391448603e+09,4.0788931813965896e+06,223304.96681753657\n4,cryptopunks,2.675936453044167e+09,2.1720323415680006e+06,716042.4500000001\n5,looksrare,1.5984313877385368e+09,501530.0226954725,50185.290415\n6,superrare,3.044450076292612e+08,454080.3801810001,2711.41353\n7,foundation,2.22984396521278e+08,170730.43359724514,18791.057531650004\n8,sudoswap,1.1065119839239097e+08,91405.45237984283,49641.91309616044\n9,mooar,9.370740688511379e+07,3.816546773342194e+07,4.211704339041664e+06\n10,pancakeswap,8.577468809809853e+07,42632.499992789955,5097.792944599999\n11,tofu,6.714663559364942e+07,76521.97898920579,5380.136450808099\n12,element,6.122191042346895e+07,74343.29233116966,21615.498594265555\n13,zora,4.001828856803733e+07,<nil>,<nil>\n14,liquidifty,2.9701757197915018e+07,0.029847000000000005,0.029847000000000005\n15,quix,1.0831134834643008e+07,<nil>,<nil>\n16,magiceden,9.29307966848028e+06,4454.432874887,87.15784495\n17,rarible,5.376697231248505e+06,51386.83617665664,4985.105076420629\n18,archipelago,5.37401337817133e+06,<nil>,<nil>\n19,aavegotchi,3.0300035670567774e+06,20759.276957762435,3149.030878339999\n20,nftrade,1.7161576961230598e+06,26676.274663999986,106.961753999999\n21,dew,1.4541526609272424e+06,<nil>,<nil>\n22,nftb,1.336229907297191e+06,<nil>,<nil>\n23,decentraland,401287.6963697007,1036.6580888416527,60.78021429999997\n24,zonic,300264.3745252976,72.93842523849997,12.032011452799999\n25,nftearth,84818.42127523685,<nil>,<nil>\n26,aurem,464.10303347643816,9.788748,<nil>\n27,fractal,183.85717919121993,<nil>,<nil>\n28,oneplanet,131.71013616000002,<nil>,<nil>"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "The requested execution ID (ID: 01HKZW3PD00VEX36QYZ1FNRA3) is invalid."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "402": {
            "description": "StatusPaymentRequired",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "This api request would exceed your configured limits per billing cycle. Please visit your settings on dune.com and adjust your limits to continue usage."
                }
              }
            }
          },
          "409": {
            "description": "Conflict for url",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "Query state is not QUERY_STATE_COMPLETED, cannot provide CSV Result",
                  "errorDetails": null,
                  "state": "QUERY_STATE_CANCELLED"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred. This usually happens due to unexpected issues in processing the request. It may include errors such as failure in core API execution, invalid query parameters, or issues with the customer data provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "QueryResult": {
        "type": "object",
        "required": ["execution_id", "query_id", "state", "submitted_at"],
        "example": {
          "execution_id": "01HKZSJAW6N2MFVCBHA3R8S64X",
          "query_id": 1252207,
          "state": "QUERY_STATE_COMPLETED",
          "is_execution_finished": true,
          "submitted_at": "2024-01-12T21:34:37.447476Z",
          "expires_at": "2024-04-11T21:34:55.737082Z",
          "execution_started_at": "2024-01-12T21:34:37.464387Z",
          "execution_ended_at": "2024-01-12T21:34:55.737081Z",
          "next_offset": 5,
          "next_uri": "https://api.dev.dune.com/api/v1/execution/01HKZSJAW6N2MFVCBHA3R8S64X/results?limit=1000&offset=5",
          "result": {
            "metadata": {
              "column_names": [
                "Rank",
                "project",
                "Total Volume",
                "7 Days Volume",
                "24 Hours Volume"
              ],
              "result_set_bytes": 310,
              "row_count": 5,
              "total_result_set_bytes": 4400,
              "total_row_count": 300,
              "datapoint_count": 25,
              "pending_time_millis": 16,
              "execution_time_millis": 18272
            },
            "rows": [
              {
                "24 Hours Volume": 8466988.095521685,
                "7 Days Volume": 39146349.94906045,
                "Rank": 1,
                "Total Volume": 38382979226.241264,
                "project": "opensea"
              },
              {
                "24 Hours Volume": 21838779.932517685,
                "7 Days Volume": 162466310.33138418,
                "Rank": 2,
                "Total Volume": 8237501261.688846,
                "project": "blur"
              },
              {
                "24 Hours Volume": 671472.4583508199,
                "7 Days Volume": 4017792.3280940033,
                "Rank": 3,
                "Total Volume": 5461953781.154043,
                "project": "x2y2"
              },
              {
                "24 Hours Volume": 1286407.4659000002,
                "7 Days Volume": 5173193.591668,
                "Rank": 4,
                "Total Volume": 2679750259.5093665,
                "project": "cryptopunks"
              },
              {
                "24 Hours Volume": 56173.5344355522,
                "7 Days Volume": 554016.6849051005,
                "Rank": 5,
                "Total Volume": 1598674364.7416763,
                "project": "looksrare"
              }
            ]
          }
        },
        "properties": {
          "execution_id": {
            "type": "string",
            "description": "Unique identifier for the execution of the query.",
            "example": "01HKZSJAW6N2MFVCBHA3R8S64X"
          },
          "query_id": {
            "type": "integer",
            "description": "Unique identifier of the query.",
            "example": 1252207
          },
          "state": {
            "type": "string",
            "description": "The state of the query execution.",
            "example": "QUERY_STATE_COMPLETED"
          },
          "is_execution_finished": {
            "type": "boolean",
            "description": "Whether the state of the query execution is terminal. This can be used for polling purposes.",
            "example": "QUERY_STATE_COMPLETED"
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query was submitted.",
            "example": "2024-01-12T21:34:37.447476Z"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query result expires.",
            "example": "2024-04-11T21:34:55.737082Z"
          },
          "execution_started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution started.",
            "example": "2024-01-12T21:34:37.464387Z"
          },
          "execution_ended_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution ended.",
            "example": "2024-01-12T21:34:55.737081Z"
          },
          "cancelled_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution was cancelled, if applicable."
          },
          "next_offset": {
            "type": "integer",
            "description": "Offset that can be used to retrieve the next page of results.",
            "example": 32000
          },
          "next_uri": {
            "type": "string",
            "description": "URI that can be used to fetch the next page of results.",
            "example": "https://api.dev.dune.com/api/v1/execution/01HKZSJAW6N2MFVCBHA3R8S64X/results?limit=1000&offset=5"
          },
          "result": {
            "$ref": "#/components/schemas/QueryResultData"
          },
          "error": {
            "$ref": "#/components/schemas/QueryResultError"
          }
        }
      },
      "ExecutionStatus": {
        "type": "object",
        "required": ["execution_id", "query_id", "state", "submitted_at"],
        "example": {
          "execution_id": "01HJ3EBNGZ8WT12KX8ZCARM5ES",
          "query_id": 3298913,
          "state": "QUERY_STATE_COMPLETED",
          "is_execution_finished": true,
          "submitted_at": "2024-12-20T11:04:18.71989Z",
          "expires_at": "2025-03-19T11:04:19.423372Z",
          "execution_started_at": "2024-12-20T11:04:18.724658237Z",
          "execution_ended_at": "2024-12-20T11:04:19.423371588Z",
          "result_metadata": {
            "column_names": [
              "Rank",
              "project",
              "Total Volume",
              "7 Days Volume",
              "24 Hours Volume"
            ],
            "datapoint_count": 40,
            "execution_time_millis": 18272,
            "pending_time_millis": 16,
            "result_set_bytes": 440,
            "total_row_count": 8
          }
        },
        "properties": {
          "execution_id": {
            "type": "string",
            "description": "Unique identifier for the execution of the query and corresponding result.",
            "example": "01HKZSJAW6N2MFVCBHA3R8S64X"
          },
          "query_id": {
            "type": "integer",
            "description": "Unique identifier of the query.",
            "example": 1252207
          },
          "state": {
            "type": "string",
            "description": "The state of the query execution.",
            "example": "QUERY_STATE_COMPLETED"
          },
          "is_execution_finished": {
            "type": "boolean",
            "description": "Whether the state of the query execution is terminal. This can be used for polling purposes.",
            "example": true
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query was submitted.",
            "example": "2024-01-12T21:34:37.447476Z"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query result expires.",
            "example": "2024-04-11T21:34:55.737082Z"
          },
          "execution_started_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution started.",
            "example": "2024-01-12T21:34:37.464387517Z"
          },
          "execution_ended_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution ended.",
            "example": "2024-01-12T21:34:55.737081299Z"
          },
          "cancelled_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the query execution was cancelled, if applicable.",
            "example": "2023-04-08T12:27:15.749154Z"
          },
          "result_metadata": {
            "$ref": "#/components/schemas/ExecutionResultMetadata"
          }
        }
      },
      "QueryResultData": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/ExecutionResultMetadata"
          },
          "rows": {
            "$ref": "#/components/schemas/QueryResultRows"
          }
        }
      },
      "QueryResultError": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of error that occurred."
          },
          "message": {
            "type": "string",
            "description": "A descriptive message about the error."
          },
          "metadata": {
            "$ref": "#/components/schemas/SyntaxErrorMetadata"
          }
        }
      },
      "QueryResultRows": {
        "type": "object",
        "description": "A list of rows. A row is dictionary of key-value pairs returned by the query, each pair corresponding to a column",
        "example": [
          {
            "24 Hours Volume": 8466988.095521685,
            "7 Days Volume": 39146349.94906045,
            "Rank": 1,
            "Total Volume": 38382979226.241264,
            "project": "opensea"
          },
          {
            "24 Hours Volume": 21838779.932517685,
            "7 Days Volume": 162466310.33138418,
            "Rank": 2,
            "Total Volume": 8237501261.688846,
            "project": "blur"
          },
          {
            "24 Hours Volume": 671472.4583508199,
            "7 Days Volume": 4017792.3280940033,
            "Rank": 3,
            "Total Volume": 5461953781.154043,
            "project": "x2y2"
          },
          {
            "24 Hours Volume": 1286407.4659000002,
            "7 Days Volume": 5173193.591668,
            "Rank": 4,
            "Total Volume": 2679750259.5093665,
            "project": "cryptopunks"
          },
          {
            "24 Hours Volume": 56173.5344355522,
            "7 Days Volume": 554016.6849051005,
            "Rank": 5,
            "Total Volume": 1598674364.7416763,
            "project": "looksrare"
          },
          {
            "24 Hours Volume": 19296.919182499998,
            "7 Days Volume": 104063.2939935,
            "Rank": 6,
            "Total Volume": 304480783.11624366,
            "project": "superrare"
          },
          {
            "24 Hours Volume": 10126.247481873,
            "7 Days Volume": 161524.37162494668,
            "Rank": 7,
            "Total Volume": 223026861.49473178,
            "project": "foundation"
          },
          {
            "24 Hours Volume": 109144.69140446292,
            "7 Days Volume": 248139.50609401206,
            "Rank": 8,
            "Total Volume": 110818263.99090719,
            "project": "sudoswap"
          }
        ]
      },
      "SyntaxErrorMetadata": {
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "description": "The line number at which the syntax error occurred."
          },
          "column": {
            "type": "integer",
            "description": "The column number at which the syntax error occurred."
          }
        }
      },
      "ExecutionResultMetadata": {
        "type": "object",
        "description": "Metadata about the execution of the query, including details like column names, row counts, and execution times.",
        "example": {
          "column_names": [
            "Rank",
            "project",
            "Total Volume",
            "7 Days Volume",
            "24 Hours Volume"
          ],
          "result_set_bytes": 280,
          "row_count": 5,
          "total_result_set_bytes": 4400,
          "total_row_count": 400,
          "datapoint_count": 25,
          "pending_time_millis": 16,
          "execution_time_millis": 18272
        },
        "properties": {
          "column_names": {
            "type": "array",
            "description": "Names of the columns in the result set.",
            "example": [
              "Rank",
              "project",
              "Total Volume",
              "7 Days Volume",
              "24 Hours Volume"
            ]
          },
          "result_set_bytes": {
            "type": "integer",
            "description": "Number of bytes in the result set for the current page of results.",
            "example": 1541
          },
          "row_count": {
            "type": "integer",
            "description": "Number of rows in the result set for the current page of results.",
            "example": 28
          },
          "total_result_set_bytes": {
            "type": "integer",
            "description": "Total number of bytes in the result set. This doesn't include the json representation overhead.",
            "example": 1541
          },
          "total_row_count": {
            "type": "integer",
            "description": "Total number of rows in the result set.",
            "example": 28
          },
          "datapoint_count": {
            "type": "integer",
            "description": "The count of datapoints used for billing/pricing, based on the result set.",
            "example": 140
          },
          "pending_time_millis": {
            "type": "integer",
            "description": "Time in milliseconds that the query was pending before execution.",
            "example": 16
          },
          "execution_time_millis": {
            "type": "integer",
            "description": "Time in milliseconds that the query took to execute.",
            "example": 18272
          }
        }
      },
      "ParameterObject": {
        "type": "object",
        "example": {
          "parameterNameFoo": "value of parameterNameFoo",
          "parameterNameBar": 420
        },
        "description": "SQL Query parameters in key-value pairs. Each parameter is to be provided in key-value pairs. This enables you to execute a parameterized query with the provided values for your parameter keys. Partial submission of parameters is allowed. For example, if the query expects three parameters and you only pass in two, the third one will automatically use its default value as defined in the Query Parameter Editor page."
      },
      "Performance": {
        "type": "string",
        "enum": ["medium", "large"],
        "description": "The performance engine tier the execution will be run on. Can be either medium or large. Medium consumes 10 credits, and large consumes 20 credits, per run. Default is medium."
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "401 unauthorized error for invalid API key",
            "example": "invalid API Key"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "404 error message for resource not found",
            "example": "not found"
          }
        }
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "400: The request could not be understood by the server due to malformed syntax or validation failure.",
            "example": "core request validation failed"
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "internal error"
          }
        },
        "description": "500: Generic error message, given when an unexpected condition is encountered and no more specific message is available. Please consult the API documentation for more details."
      }
    }
  }
}
